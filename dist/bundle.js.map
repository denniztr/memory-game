{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://skypro-hw/webpack/bootstrap","webpack://skypro-hw/webpack/runtime/define property getters","webpack://skypro-hw/webpack/runtime/hasOwnProperty shorthand","webpack://skypro-hw/./utils.js","webpack://skypro-hw/./app.js","webpack://skypro-hw/./components/level-selection-component.js","webpack://skypro-hw/./components/game-board-component.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export function getPairs(count) {\n    const cards = [\n        'static/cards/туз бубны.svg',\n        'static/cards/король бубны.svg',\n        'static/cards/дама бубны.svg',\n        'static/cards/валет бубны.svg',\n        'static/cards/10 бубны.svg',\n        'static/cards/9 бубны.svg',\n        'static/cards/8 бубны.svg',\n        'static/cards/7 бубны.svg',\n        'static/cards/6 бубны.svg',\n        'static/cards/туз пики.svg',\n        'static/cards/король пики.svg',\n        'static/cards/дама пики.svg',\n        'static/cards/валет пики.svg',\n        'static/cards/10 пики.svg',\n        'static/cards/9 пики.svg',\n        'static/cards/8 пики.svg',\n        'static/cards/7 пики.svg',\n        'static/cards/6 пики.svg',\n        'static/cards/туз черви.svg',\n        'static/cards/король черви.svg',\n        'static/cards/дама черви.svg',\n        'static/cards/валет черви.svg',\n        'static/cards/10 черви.svg',\n        'static/cards/9 черви.svg',\n        'static/cards/8 черви.svg',\n        'static/cards/7 черви.svg',\n        'static/cards/6 черви.svg',\n        'static/cards/туз крести.svg',\n        'static/cards/король крести.svg',\n        'static/cards/дама крести.svg',\n        'static/cards/валет крести.svg',\n        'static/cards/10 крести.svg',\n        'static/cards/9 крести.svg',\n        'static/cards/8 крести.svg',\n        'static/cards/7 крести.svg',\n        'static/cards/6 крести.svg',\n    ];\n    let pairs = [];\n\n    for (let i = 0; i < count; i++) {\n        let cardIndex = Math.floor(Math.random() * cards.length); // Случайный индекс карты\n        let card = cards[cardIndex];\n\n        pairs.push(card);\n        pairs.push(card);\n\n        cards.splice(cardIndex, 1); // Удаляем использованную карту из колоды\n    }\n\n    return pairs;\n}\n\nexport const shuffle = (array) => {\n    let currentIndex = array.length,\n        randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ];\n    }\n\n    return array;\n};\n","import { createLevelSelection } from './components/level-selection-component.js';\nimport './style.css';\n\nexport const app = document.querySelector('#app');\n\nfunction renderGame() {\n    createLevelSelection();\n}\n\nrenderGame();\n","import { app } from '../app.js';\nimport { gameBoardComponent } from './game-board-component.js';\nimport { getPairs, shuffle } from '../utils.js';\n\nexport function createLevelSelection() {\n    const levelSelectionBox = document.createElement('div');\n    levelSelectionBox.classList.add('level-selection-box');\n\n    const levelSelectionTitle = document.createElement('h3');\n    levelSelectionTitle.textContent = 'Выбери сложность';\n    levelSelectionTitle.classList.add('level-selection-title');\n    levelSelectionBox.append(levelSelectionTitle);\n\n    const levelListBox = document.createElement('form');\n    levelListBox.setAttribute('id', 'level-form');\n    levelSelectionBox.append(levelListBox);\n    levelListBox.innerHTML = `  <div class=\"level-selection-container\">\n                                    <button type=\"button\" value=\"1\" class=\"level-button\">1</button>\n                                    <button type=\"button\" value=\"2\" class=\"level-button\">2</button>\n                                    <button type=\"button\" value=\"3\" class=\"level-button\">3</button>\n                                </div>\n                                <div class=\"start-the-game-container\">\n                                    <button type=\"submit\" class=\"start-game-button\">Старт</button>\n                                </div>  `;\n\n    app.append(levelSelectionBox);\n\n    const levelSelectionWarning = document.createElement('p');\n    levelSelectionWarning.classList.add('level-selection-warning');\n    levelSelectionBox.append(levelSelectionWarning);\n\n    const levelButtons = document.querySelectorAll('.level-button');\n    levelButtons.forEach((button) => {\n        button.addEventListener('click', function () {\n            levelButtons.forEach((btn) => {\n                btn.classList.remove('selected');\n            });\n            this.classList.add('selected');\n        });\n    });\n\n    document\n        .getElementById('level-form')\n        .addEventListener('submit', function (event) {\n            event.preventDefault();\n            const selectedLevel = document.querySelector(\n                '.level-button.selected',\n            );\n\n            if (selectedLevel) {\n                const levelValue = selectedLevel.value;\n                let generatedDeck = [];\n\n                if (levelValue == 1) {\n                    console.log(`Начало игры с уровнем ${levelValue}`);\n                    generatedDeck = shuffle(getPairs(3));\n                } else if (levelValue == 2) {\n                    console.log(`Начало игры с уровнем ${levelValue}`);\n                    generatedDeck = shuffle(getPairs(6));\n                } else if (levelValue == 3) {\n                    console.log(`Начало игры с уровнем ${levelValue}`);\n                    generatedDeck = shuffle(getPairs(9));\n                }\n\n                gameBoardComponent(generatedDeck);\n            } else {\n                levelSelectionWarning.textContent =\n                    'выберите уровень чтобы начать игру';\n                setTimeout(function () {\n                    levelSelectionWarning.textContent = '';\n                }, 3000);\n            }\n        });\n}\n","import { app } from '../app.js';\n\nexport function gameBoardComponent(deck) {\n    let flippedCards = [];\n    const gameBoardRender = () => {\n        const cardsHtml = deck\n            .map((card, index) => {\n                return `<div id='cardWrap' class=\"card-container\">\n            <img data-set=\"${index}\" class=\"card default\" src=\"${card}\">\n            <img data-set=\"${index}\" class=\"card blank isFlipped\" src=\"static/cards/рубашка.svg\">\n            </div>`;\n            })\n            .join('');\n\n        const renderGameBoard = `   <div class=\"game-board-header-container\">\n                                        <div class=\"game-board-timer\">00.00</div>\n                                        <button id=\"restart-game-button\">Начать заново</button>\n                                    </div>\n                                    <div id=\"game-board\">${cardsHtml}</div>  `;\n        app.innerHTML = renderGameBoard;\n\n        const blankCards = document.querySelectorAll('.blank');\n        blankCards.forEach((blankCard) => {\n            setTimeout(() => blankCard.classList.remove('isFlipped'), 3000);\n        });\n\n        const cardContainers = document.querySelectorAll('.card-container');\n        cardContainers.forEach((cardContainer) => {\n            cardContainer.addEventListener('click', () => {\n                cardContainer.children[1].classList.add('isFlipped');\n                flippedCards.push(cardContainer.children[0]);\n                console.log(flippedCards);\n\n                let card1 = flippedCards[0];\n                let card2 = flippedCards[1];\n\n                if (flippedCards.length === 2) {\n                    // cardContainer.children[1].classList.add('isFlipped')\n\n                    if (\n                        card1.getAttribute('src') === card2.getAttribute('src')\n                    ) {\n                        // card1.classList.add('matched');\n                        // card2.classList.add('matched');\n                        // cardContainer.children[1].classList.add('isFlipped')\n                        console.log('Угадали пару');\n                        flippedCards.splice(0, 2);\n                        console.log(flippedCards);\n                    } else {\n                        // card1.classList.remove('matched')\n                        // card2.classList.remove('matched')\n                        // setTimeout(() => {\n                        //     card1.classList.remove('hidden')\n                        //     card2.classList.remove('hidden')\n                        // }, 500);\n                        alert('Проиграл');\n                        flippedCards.splice(0, 2);\n                    }\n                }\n            });\n        });\n    };\n\n    gameBoardRender();\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getPairs","count","cards","pairs","i","cardIndex","Math","floor","random","length","card","push","splice","shuffle","array","randomIndex","currentIndex","app","document","querySelector","levelSelectionBox","createElement","classList","add","levelSelectionTitle","textContent","append","levelListBox","setAttribute","innerHTML","levelSelectionWarning","levelButtons","querySelectorAll","forEach","button","addEventListener","btn","remove","this","getElementById","event","preventDefault","selectedLevel","levelValue","value","generatedDeck","console","log","deck","flippedCards","renderGameBoard","map","index","join","blankCard","setTimeout","cardContainer","children","card1","card2","getAttribute","alert","gameBoardRender","gameBoardComponent","createLevelSelection"],"sourceRoot":""}